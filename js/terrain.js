"use strict";

// class for land/terrain -> org class Place
class Terrain {
    constructor(wdt, form, y) {
        this.y = y;
        this.h = 6;
        this.w = 21;
        this.wdt = wdt;
        this.form = form;
        this.clr = clr[2];  // green for land
        // NOTE: each # in the array draws 6 vertical lines
        //  screen_height (game scroll area) = 480,
        //  so 480/6 = 80 #s for terrain height to equal screen_height
        //  but we need a few more than 80 to avoid sceen anomalies
        this.mp = [
            [    1,  2,  3,  4,  5,  6,  7,  8,  9, 10,  // terrain_intro -> map 0 -> 81 #s
                11, 12, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14,
                14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
                14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
                14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
                14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
                14, 14, 14, 14, 14, 14, 13, 12, 11, 10,
                 9,  8,  7,  6,  5,  4,  3,  2,  1],

           [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10,     // 1 -> 81 #s
            11, 12, 12, 12, 12, 12, 12, 12, 12, 12,
            12, 12, 12, 12,
            12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
            12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
            12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
            12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
            12, 12, 12, 12, 12, 12, 11, 10,  9,  8,
            7, 6, 5, 4, 3, 2, 1],

           [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,          // 2 -> 81 #s
            10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
            10, 10, 10, 10,
            10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
            10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
            10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
            10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
            10, 10, 10, 10, 10, 10, 10, 10,  9,  8,
            7, 6, 5, 4, 3, 2, 1],    

            [1, 2, 3, 4, 5, 6, 7, 8, 8, 8,          // 3 -> 81 #s
            8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
            8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
            8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
            8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
            8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
            8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
            8, 8, 7, 6, 5, 4, 3, 2, 1],

           [1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6,          // 4 -> 81 #s
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
            6, 6, 6, 6, 6, 5, 4, 3, 2, 1],

           [1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4,         // 5 -> 81 #s
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
            4, 4, 4, 4, 4, 4, 4, 3, 2, 1],

           [1, 2, 2, 2, 2, 2, 2, 2, 2, 2,           // 6 -> 81 #s
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],

           [0],                                 // 7  empty (vazia)

           [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10,     // base -> map 8 -> 65 #s
            11, 12, 13, 14, 14, 14, 14, 14, 14, 14,     // base always appears just below road/bridge
            14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
            14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
            14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
            14, 14, 13, 12, 11, 10,  9,  8,  7,  6,
             5,  4,  3,  2,  1]
        ]
    }

    show() {
        noStroke();
        fill(this.clr);
        //let ter = this.mp[this.form];
        let len = this.mp[this.form].length;
        for (let py=0; py<len; py++) {
            rect(0, this.y + py * this.h, this.w + this.mp[this.form][py] * this.w, this.h);
            let invert = (this.wdt - this.w) - this.mp[this.form][py] * this.w;
            rect(invert, this.y + py * this.h, this.wdt - invert, this.h);
        }
        this.showMapNum();
    }

    showMapNum() {
        textFont("arial black");
        fill(0);
        textSize(20);
        let msg;
        if (this.form == 8) msg = "BASE ";
        else msg = "Map ";
        msg += this.form;
        text(msg + " top", 10, this.y);
        let len = this.mp[this.form].length;
        text(msg + " bottom", 10, this.y+len*this.h);
    }
}
